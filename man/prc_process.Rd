% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prc_process.R
\name{prc_process}
\alias{prc_process}
\title{Patient Record Consistency}
\usage{
prc_process(
  cohort,
  prc_event_file,
  omop_or_pcornet,
  multi_or_single_site = "single",
  anomaly_or_exploratory = "exploratory",
  age_groups = NULL,
  patient_level_tbl = FALSE,
  fu_breaks = c(0, 1, 3, 8, 11, 15, 25, 50, 100),
  p_value = 0.9,
  time = FALSE,
  time_span = c("2012-01-01", "2020-01-01"),
  time_period = "year"
)
}
\arguments{
\item{cohort}{\emph{tabular input} | cohort for SQUBA testing; required fields:
\itemize{
\item \code{site} | \emph{character}
\item \code{person_id} / \code{patid} | \emph{integer} / \emph{character}
\item \code{start_date} | \emph{date}
\item \code{end_date} | \emph{date}
}}

\item{prc_event_file}{\emph{tabular input} | a table with the definitions for each event with the columns
\itemize{
\item \code{event} | \emph{character} | A or B
\item \code{event_label} | \emph{character} | a descriptive label for the event
\item \code{domain_tbl} | \emph{character} | the default CDM table from which data is retrieved
\item \code{concept_field} | \emph{character} | the field in the table where the codes of interest are stored
\item \code{date_field} | \emph{character} | the date field to be used to establish the index & occurrence dates
\item \code{vocabulary_field} | \emph{character} | (PCORnet only) The name of the column in the domain table where the vocabulary type is stored
\item \code{codeset_name} | \emph{character} | the name of the codeset in the specs directory to define the variable of interest
\item \code{filter_logic} | \emph{character} | a string indicating any filter logic that should be applied to establish the event
ex: an Hba1c > 6.5
}}

\item{omop_or_pcornet}{\emph{string} | Option to run the function using the OMOP or PCORnet CDM as the default CDM
\itemize{
\item \code{omop}: run the \code{\link[=prc_process_omop]{prc_process_omop()}} function against an OMOP CDM instance
\item \code{pcornet}: run the \code{\link[=prc_process_pcornet]{prc_process_pcornet()}} function against a PCORnet CDM instance
}}

\item{multi_or_single_site}{\emph{string} | Option to run the function on a single vs multiple sites
\itemize{
\item \code{single} - run the function for a single site
\item \code{multi} - run the function for multiple sites
}}

\item{anomaly_or_exploratory}{\emph{string} | Option to conduct an exploratory or anomaly detection analysis. Exploratory analyses give a high
level summary of the data to examine the fact representation within the cohort. Anomaly detection
analyses are specialized to identify outliers within the cohort.}

\item{age_groups}{\emph{tabular input} | If you would like to stratify the results by age group,  create a table or CSV file with the following
columns and include it as the \code{age_groups} function parameter:
\itemize{
\item \code{min_age} | \emph{integer} | the minimum age for the group (i.e. 10)
\item \code{max_age} | \emph{integer} | the maximum age for the group (i.e. 20)
\item \code{group} | \emph{character} | a string label for the group (i.e. 10-20, Young Adult, etc.)
}

If you would \emph{not} like to stratify by age group, leave the argument as NULL}

\item{patient_level_tbl}{\emph{boolean} | logical controlling whether patient level output is returned or not}

\item{fu_breaks}{\emph{vector} | a numeric vector that defines how to group different windows of follow up time}

\item{p_value}{\emph{numeric} | the p value to be used as a threshold in the multi-site anomaly detection analysis}

\item{time}{\emph{boolean} | a logical that tells the function whether you would like to look at the output over time}

\item{time_span}{\emph{vector - length 2} | when time = TRUE, this argument defines the start and end dates for the time period of interest. should be
formatted as c(start date, end date) in yyyy-mm-dd date format}

\item{time_period}{\emph{string} | when time = TRUE, this argument defines the distance between dates within the specified time period. defaults
to \code{year}, but other time periods such as \code{month} or \code{week} are also acceptable}
}
\value{
a dataframe summarizing how often two events occur and co-occur within a patient record
}
\description{
This is a concordance module that will assess consistency within a patient
record by evaluating the presence or absence of two user-provided clinical
events (\code{prc_event_file}). The checks in the module will establish whether
one of, neither, or both events are present in each patient record and
summarize these results across the full cohort. A sample version of the
input file is accessible with \verb{patientrecordconsistency::}. This function
is compatible with both the OMOP and the PCORnet CDMs based on the user's
selection.
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'patientrecordconsistency'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'prc_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = system.file('extdata',
                                        package = 'patientrecordconsistency'),
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000), # RSQLite does not store date objects,
                                      # hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Build function input table
prc_events <- tidyr::tibble(event = c('a', 'b'),
                            event_label = c('hypertension', 'inpatient/ED visit'),
                            domain_tbl = c('condition_occurrence', 'visit_occurrence'),
                            concept_field = c('condition_concept_id', 'visit_concept_id'),
                            date_field = c('condition_start_date', 'visit_start_date'),
                            vocabulary_field = c(NA, NA),
                            codeset_name = c('dx_hypertension', 'visit_edip'),
                            filter_logic = c(NA, NA))

#' Execute `prc_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
prc_process_example <- prc_process(cohort = cohort,
                                   multi_or_single_site = 'single',
                                   anomaly_or_exploratory = 'exploratory',
                                   time = FALSE,
                                   omop_or_pcornet = 'omop',
                                   prc_event_file = prc_events)

prc_process_example

#' Execute `prc_output` function
prc_output_example <- prc_output(process_output = prc_process_example)

prc_output_example

#' Easily convert the graph into an interactive ggiraph or plotly object with
#' `make_interactive_squba()`

make_interactive_squba(prc_output_example)
}
